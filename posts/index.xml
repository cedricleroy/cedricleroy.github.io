<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cedric&#39;s notes</title>
    <link>/posts/</link>
    <description>Recent content on Cedric&#39;s notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Nov 2019 13:23:12 -0600</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust Idioms</title>
      <link>/posts/rust/</link>
      <pubDate>Sun, 03 Nov 2019 13:23:12 -0600</pubDate>
      
      <guid>/posts/rust/</guid>
      <description>Resources Below are some great resource that were used for this page:
 Rust Programming Techniques: https://youtu.be/vqavdUGKeb4 Rust Language Cheat Sheet: https://cheats.rs/  Pattern Matching enum Foo{A(i32),B,C}letfoo=matchx{Foo::A(n)=&amp;gt;n,_=&amp;gt;0,}; Option Type enum Option&amp;lt;T&amp;gt;{Some(T),None} Result Type enum Result&amp;lt;T,E&amp;gt;{Ok(T),Err(E)} Example:
fn h(value: i32)-&amp;gt; Result&amp;lt;i32,String&amp;gt;{matchi{iifi&amp;gt;=0=&amp;gt;Ok(i+10),_=&amp;gt;Err(format!(&amp;#34;Input to h less than 0, found {}&amp;#34;,i))}}fn main(){letinput: i32 =4;matchh(input){Ok(value)=&amp;gt;println!(&amp;#34;Result: {}&amp;#34;,value),Err(e)=&amp;gt;println!(&amp;#34;Error: {}&amp;#34;,e)}} if let ifletOk(i)=h(){// do something } We ignore any error.
? Common idiom:
leti=matchh(){Ok(i)=&amp;gt;i,err=&amp;gt;returnerr// throw the error }; Equals to the following one liner:</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>/posts/algorithms/</link>
      <pubDate>Tue, 22 Oct 2019 15:28:38 -0500</pubDate>
      
      <guid>/posts/algorithms/</guid>
      <description>Below are some homework / notes about algorithms.
Merge Sort def merge_sort(l): &amp;#34;&amp;#34;&amp;#34; merge sort implementation &amp;#34;&amp;#34;&amp;#34; length = len(l) if length in [0, 1]: # base cases return l middle = length // 2 left, right = l[:middle], l[middle:] left_sorted = merge_sort(left) right_sorted = merge_sort(right) merged = [] i = j = 0 while i != len(left_sorted) and j != len(right_sorted): if left_sorted[i] &amp;lt; right_sorted[j]: merged.append(left_sorted[i]) i += 1 elif left_sorted[i] &amp;gt; right_sorted[j]: merged.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>/posts/python/</link>
      <pubDate>Sat, 09 Mar 2019 10:00:36 -0600</pubDate>
      
      <guid>/posts/python/</guid>
      <description> Data structures Lists i = l.index(value) # get index l = l[::-1] # reverse a list</description>
    </item>
    
    <item>
      <title>Git Sheet Cheat</title>
      <link>/posts/git/</link>
      <pubDate>Wed, 27 Feb 2019 20:54:51 -0600</pubDate>
      
      <guid>/posts/git/</guid>
      <description> Local config &amp;gt;&amp;gt; git config --global user.email &amp;quot;email@example.com&amp;quot;  Reset last commit &amp;gt;&amp;gt; git reset HEAD~1  Status of all files &amp;gt;&amp;gt; git status -u  Update last commit &amp;gt;&amp;gt; git commit --amend &amp;gt;&amp;gt; git push origin &amp;lt;branch&amp;gt; --force  </description>
    </item>
    
    <item>
      <title>A Development Workflow</title>
      <link>/posts/a-development-workflow/</link>
      <pubDate>Sun, 19 Aug 2018 20:32:21 -0500</pubDate>
      
      <guid>/posts/a-development-workflow/</guid>
      <description>From my first programming steps, I used a bunch of different IDEs to code, depending on the times and the programming language used: Borland C++, Code::Blocks (for C), Visual Studio (C, C++), Matlab IDE, IDLE (Python native IDE), Eclipse (With PyDev for Python), Spyder, Sublime Text, Vim, VS Code, etc.
This is somehow chronological. I lately used VS Code because of three main reasons: This is a great software from Microsoft, I needed to work on Windows (unfortunately) and wanted something great for switching between languages.</description>
    </item>
    
    <item>
      <title>This Website</title>
      <link>/posts/this-website/</link>
      <pubDate>Sat, 18 Aug 2018 21:00:14 -0500</pubDate>
      
      <guid>/posts/this-website/</guid>
      <description>This website uses hugo, a static website generator. There is no particular reasons for me choosing hugo. There are tons of other solutions available. I needed something simple enough to avoid the hassle of learning a new framework, being static and support of markdown. Google leaded me to hugo.
Installation (MacOS)
&amp;gt;&amp;gt; brew install hugo  Creating a new site hugo new mynewsite  Themes Hugo uses themes. I picked up after dark, a minimalist dark theme.</description>
    </item>
    
  </channel>
</rss>